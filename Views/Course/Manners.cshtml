@model List<AutismEducationPlatform.Web.Models.ViewModels.MannersViewModel>

@{
    ViewData["Title"] = "Görgü Kuralları";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <a asp-controller="Course" asp-action="Index" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Eğitimlere Dön
            </a>
        </div>
    </div>

    <h2 class="text-center mb-4">Görgü Kuralları</h2>
    <p class="text-center mb-5">Toplum içinde nasıl davranmamız gerektiğini öğrenelim!</p>

    <div class="row g-4">
        @foreach (var manner in Model)
        {
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 shadow-sm border-0 rounded-4 overflow-hidden hover-scale">
                    <div class="position-relative">
                        <img src="@manner.ImagePath" class="card-img-top" alt="@manner.Title" 
                             style="height: 200px; object-fit: cover; padding: 1rem; transition: transform 0.3s;">
                        <div class="position-absolute top-0 end-0 m-2">
                            <span class="badge @manner.Color rounded-pill">@manner.Category</span>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-center mb-3 fw-bold">@manner.Title</h5>
                        <p class="card-text flex-grow-1">@manner.Description</p>
                        <div class="mt-3 border-top pt-3">
                            <div class="mb-2">
                                <small class="text-muted d-block">
                                    <i class="fas fa-lightbulb me-2"></i>
                                    <strong>Örnek Durum:</strong> @manner.Example
                                </small>
                            </div>
                            <div>
                                <small class="text-success d-block">
                                    <i class="fas fa-check-circle me-2"></i>
                                    <strong>Doğru Davranış:</strong> @manner.CorrectBehavior
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent border-0 text-center pb-3">
                        <button class="btn btn-primary rounded-pill px-4 play-button" 
                                onclick="playAudio(this)">
                            <i class="fas fa-volume-up me-2"></i>
                            <span>Dinle</span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-exclamation-circle me-2"></i>
                <span id="toastMessage">Ses dosyası yüklenirken bir hata oluştu.</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<style>
    .hover-scale {
        transition: transform 0.3s ease;
    }
    
    .hover-scale:hover {
        transform: translateY(-5px);
    }
    
    .play-button {
        transition: all 0.3s ease;
    }
    
    .play-button:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .play-button.playing {
        background-color: #28a745;
        border-color: #28a745;
    }
    
    .card {
        border: none;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .badge {
        font-size: 0.8rem;
        padding: 0.5rem 1rem;
    }

    .toast {
        opacity: 0.95;
    }

    .play-button:disabled {
        cursor: not-allowed;
        opacity: 0.7;
    }

    .card-text {
        font-size: 0.95rem;
        line-height: 1.5;
    }

    .text-success {
        color: #28a745 !important;
    }

    .loading-spinner {
        width: 1rem;
        height: 1rem;
        border: 2px solid #fff;
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        animation: rotation 1s linear infinite;
        margin-right: 0.5rem;
    }

    @@keyframes rotation {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@section Scripts {
    <script>
        let currentAudio = null;
        let currentButton = null;
        let toast = null;

        // Türkçe karakterleri dönüştürme fonksiyonu
        function convertToAscii(text) {
            const specialCases = {
                'Teşekkür Etmek': 'tesekkuretmek',
                'Kapıyı Çalmak': 'kapiyicalmak',
                'Sofra Adabı': 'sofraadabi',
                'Sıra Beklemek': 'sirabeklemek',
                'Özür Dilemek': 'ozurdilemek',
                'Paylaşmak': 'paylasmak',
                'Selamlaşmak': 'selamlasmak',
                'Dinlemek': 'dinlemek'
            };

            // Önce özel durumları kontrol et
            if (specialCases[text]) {
                return specialCases[text];
            }

            // Eğer özel durum yoksa, genel dönüşümü uygula
            const turkishChars = {
                'ı': 'i', 'İ': 'i',
                'ğ': 'g', 'Ğ': 'g',
                'ü': 'u', 'Ü': 'u',
                'ş': 's', 'Ş': 's',
                'ö': 'o', 'Ö': 'o',
                'ç': 'c', 'Ç': 'c',
                ' ': ''
            };
            
            return text.toLowerCase().replace(/[ıİğĞüÜşŞöÖçÇ ]/g, letter => turkishChars[letter] || letter);
        }

        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', function() {
            // Toast'u başlat
            toast = new bootstrap.Toast(document.querySelector('.toast'));
            
            // Tüm ses düğmelerinin data-audio-path özelliğini güncelle
            document.querySelectorAll('.play-button').forEach(button => {
                const originalTitle = button.closest('.card').querySelector('.card-title').textContent.trim();
                const audioFileName = convertToAscii(originalTitle);
                button.dataset.audioPath = `/sounds/manners/${audioFileName}.mp3`;
                console.log('Ses dosyası yolu güncellendi:', button.dataset.audioPath, 'Orijinal başlık:', originalTitle);
            });
        });

        function resetButton(button) {
            button.disabled = false;
            button.classList.remove('playing');
            button.innerHTML = '<i class="fas fa-volume-up me-2"></i><span>Dinle</span>';
        }

        function setPlayingState(button) {
            button.disabled = false;
            button.classList.add('playing');
            button.innerHTML = '<i class="fas fa-pause me-2"></i><span>Durdur</span>';
        }

        function setLoadingState(button) {
            button.disabled = true;
            button.innerHTML = '<span class="loading-spinner"></span><span>Yükleniyor...</span>';
        }

        async function playAudio(button) {
            const audioPath = button.dataset.audioPath;
            console.log('Çalınacak ses dosyası:', audioPath);

            // Eğer aynı ses çalınıyorsa durdur
            if (currentButton === button && currentAudio) {
                currentAudio.pause();
                currentAudio.currentTime = 0;
                resetButton(button);
                currentAudio = null;
                currentButton = null;
                return;
            }

            // Eğer başka bir ses çalınıyorsa onu durdur
            if (currentAudio) {
                currentAudio.pause();
                currentAudio.currentTime = 0;
                resetButton(currentButton);
            }

            try {
                // Yükleniyor durumunu göster
                setLoadingState(button);

                // Ses dosyasının varlığını kontrol et
                const response = await fetch(audioPath);
                if (!response.ok) {
                    console.error('Ses dosyası bulunamadı:', audioPath, 'HTTP Status:', response.status);
                    throw new Error(`Ses dosyası bulunamadı: ${audioPath} (HTTP ${response.status})`);
                }

                // Yeni sesi çal
                currentAudio = new Audio(audioPath);
                currentButton = button;

                // Ses yüklendiğinde
                currentAudio.oncanplaythrough = function() {
                    console.log('Ses dosyası başarıyla yüklendi:', audioPath);
                    setPlayingState(button);
                };

                // Ses bittiğinde
                currentAudio.onended = function() {
                    console.log('Ses dosyası çalma tamamlandı:', audioPath);
                    resetButton(button);
                    currentAudio = null;
                    currentButton = null;
                };

                // Hata durumunda
                currentAudio.onerror = function(event) {
                    const error = event.target.error;
                    console.error('Ses çalma hatası:', error);
                    let errorMessage = 'Ses dosyası yüklenirken bir hata oluştu.';
                    
                    if (error.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED) {
                        errorMessage = 'Ses dosyası formatı desteklenmiyor.';
                    } else if (error.code === MediaError.MEDIA_ERR_NETWORK) {
                        errorMessage = 'Ağ hatası: Ses dosyası yüklenemedi.';
                    } else if (error.code === MediaError.MEDIA_ERR_DECODE) {
                        errorMessage = 'Ses dosyası çözümlenemedi.';
                    }
                    
                    document.getElementById('toastMessage').textContent = errorMessage;
                    toast.show();
                    resetButton(button);
                    currentAudio = null;
                    currentButton = null;
                };

                // Sesi çal
                console.log('Ses çalmaya başlanıyor:', audioPath);
                await currentAudio.play();

            } catch (error) {
                console.error('Ses yükleme hatası:', error);
                document.getElementById('toastMessage').textContent = error.message || 'Ses dosyası yüklenirken bir hata oluştu.';
                toast.show();
                resetButton(button);
                currentAudio = null;
                currentButton = null;
            }
        }
    </script>
} 